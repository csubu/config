#+TITLE: Michael Fogleman's Emacs configuration
#+OPTIONS: toc:4 h:4
* Introduction
** Quotations
*** On Emacs
#+begin_quote 
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "[[http://www.cryptonomicon.com/beginning.html][In the Beginning was the Command Line]]"
#+end_quote

#+begin_quote
On 2 Apr 1992 in the journal Nature the discovery was reported that a
giant ancient fungus had been living under the forests of Michigan for
at least 1,500 years, the oldest and largest living thing on
Earth. Software could get to be like that, I suppose, and Emacs,
incorporating, like the fungal thallus, all the the filamentous
strands of Emacs Lisp that now already thinly web the Earth, is surely
a front runner. But do not be distracted by such lives.  Even the life
of Emacs, like the life of that fungus, is an ephemerality; to grok
life one must transcend not only thermospace but cyberspace.

-- [[http://www.eskimo.com/~seldon/dotemacs.el][Will Mengarini]]
#+end_quote

*** On Literate Programming

#+begin_quote 
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

The practitioner of literate programming can be regarded as an
essayist, whose main concern is with exposition and excellence of
style. Such an author, with thesaurus in hand, chooses the names of
variables carefully and explains what each variable means. He or she
strives for a program that is comprehensible because its concepts have
been introduced in an order that is best for human understanding,
using a mixture of formal and informal methods that reinforce each
other.

-- Donald Knuth
#+end_quote

#+begin_quote 
In my experience, software created with literate programming has
turned out to be significantly better than software developed in more
traditional ways...

Jon Bentley probably hit the nail on the head when he once was asked
why literate programming hasn’t taken the whole world by storm. He
observed that a small percentage of the world’s population is good at
programming, and a small percentage is good at writing; apparently I
am asking everybody to be in both subsets.

Yet to me, literate programming is certainly the most important thing
that came out of the TeX project. Not only has it enabled me to write
and maintain programs faster and more reliably than ever before, and
been one of my greatest sources of joy since the 1980s—it has actually
been indispensable at times.

-- [[http://www.informit.com/articles/article.aspx?p=1193856][Donald Knuth]]
#+end_quote
* Settings
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Michael Fogleman"
      user-mail-address "michaelwfogleman@gmail.com")
#+end_src
** Enable package support
I set up packages, Melpa, and use-package bright and early so that I can make use of use-package's bind-key macro. In the future, I'd like to make use of its :ensure keyword.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.milkbox.net/packages/") t)
  (package-initialize)
  (require 'use-package)
#+end_src
** Turn off unnecessary graphical features
#+begin_src emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+end_src
** Window handling
To handle windows intelligently, I use the windmove functionality, along with some special functionality for Org where windmove is active in locations where Org Mode does not have special functions.

#+begin_src emacs-lisp
(windmove-default-keybindings)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src
** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+end_src
** Change prompts
Make yes or no prompts be y or n prompts.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Computer
This displays the time and the status of my laptop battery.

#+begin_src emacs-lisp
(setq display-time-day-and-date 1)
(display-time-mode 1)
(display-battery-mode 1)
#+end_src
** Internet
It'd be great to get an Emacs browser going, but in the meantime:

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")
#+end_src

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c B" 'browse-url)
#+END_SRC
** Keyboard shortcuts
*** From Better Defaults
These bindings (from "[[https://github.com/technomancy/better-defaults][Better Defaults]]") rebind the default commands to
use hippie-expand, ibuffer, and the regex-aware versions of isearch.

#+begin_src emacs-lisp
  (bind-key "M-/" 'hippie-expand)
  (bind-key "C-x C-b" 'ibuffer)
  (bind-key "C-s" 'isearch-forward-regexp)
  (bind-key "C-r" 'isearch-backward-regexp)
  (bind-key "C-M-s" 'isearch-forward)
  (bind-key "C-M-r" 'isearch-backward)
#+end_src
*** Lines
Enable line indenting automatically. If needed, you can disable on a mode-by-mode basis.

#+begin_src emacs-lisp
  (bind-key "RET" 'newline-and-indent)
#+end_src

Make C-n insert new lines if the point is at the end of the buffer.

#+begin_src emacs-lisp
(setq next-line-add-newlines t)
#+end_src
*** Movement
These keybindings for movement come from [[http://whattheemacsd.com/key-bindings.el-02.html][What the .emacs.d?]].

#+begin_src emacs-lisp
  (bind-key "C-S-n"
            (lambda ()
              (interactive)
              (ignore-errors (next-line 5))))
  
  (bind-key "C-S-p"
            (lambda ()
              (interactive)
              (ignore-errors (previous-line 5))))
  
  (bind-key "C-S-f"
            (lambda ()
              (interactive)
              (ignore-errors (forward-char 5))))
  
  (bind-key "C-S-b"
            (lambda ()
              (interactive)
              (ignore-errors (backward-char 5))))
#+end_src
*** Battery
Sometimes I can't see my battery display, even though I have used Diminish. This gives me quick access, in Emacs, to the battery status. It's bound to "p," because "b" is taken. Mnemonyic: "power."

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c p" 'battery)
#+END_SRC
*** Meta Binds
The Endless Parentheses blog "[[http://endlessparentheses.com/Meta-Binds-Part-1%25253A-Drunk-in-the-Dark.html][Drunk in the Dark]]" suggests that you don't need three ways to do numeric prefixes, and that you can make use of the meta-binds instead. He suggests using backward- and forward-sexp and delete-other-windows:

#+BEGIN_SRC emacs-lisp
  (bind-key "M-9" 'sp-backward-sexp)
  (bind-key "M-0" 'sp-forward-sexp)
  (bind-key "M-1" 'delete-other-windows)
  (bind-key "M-O" 'mode-line-other-buffer)
#+END_SRC

I look forward to riffing on this idea...
*** Copying and Killing
ejmr's [[http://ericjmritz.name/2013/06/01/snippets-from-my-personal-emacs-configuration/][snippets post]] recommends giving this advice to kill-ring-save and kill-ring, which, if no region is selected, makes C-w and M-w kill or copy the current line. 

#+BEGIN_SRC emacs-lisp
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
#+END_SRC
*** backward-kill-line
This binding comes from [[http://emacsredux.com/blog/2013/04/08/kill-line-backward/][Emacs Redux]]. Note that we don't need a new function, just an anonymous function.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-<backspace>" (lambda ()
                              (interactive)
                              (kill-line 0)
                              (indent-according-to-mode)))
#+END_SRC
** Other
*** Apropos
Let apropos commands perform more extensive searches than
default. This also comes from Better Defaults.

#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src
*** Buffer / File Warnings
Remove the warning if a buffer or file does not exist, so you can
create them.

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src
*** Narrow to Region
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src
*** ELisp
When in emacs-lisp-mode, display the argument list for the current function. I liked this functionality in SLIME; glad Emacs has it too. Thanks for the tip, Sacha.

#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
* Packages
** God Mode
[[https://github.com/chrisdone/god-mode][God Mode]] makes Emacs key-combinations a lot shorter! I've set ESC to
toggle between God mode and non-God mode.

#+begin_src emacs-lisp
  (defun my-update-cursor ()
    (setq cursor-type (if (or god-local-mode buffer-read-only)
                          'bar
                        'box)))
  
  (use-package god-mode
    :bind (("<escape>" . god-local-mode)
          ("C-x C-1" . delete-other-windows)
          ("C-x C-2" . split-window-below)
          ("C-x C-3" . split-window-right)
          ("C-x C-0" . delete-window))
    :init
    (add-hook 'god-mode-enabled-hook 'my-update-cursor)
    (add-hook 'god-mode-disabled-hook 'my-update-cursor)
    :config
    (bind-keys :map god-local-mode-map
               ("z" . repeat)
               ("." . repeat)
               ("i" . god-local-mode))
    (add-to-list 'god-exempt-major-modes 'mu4e-compose-mode)
    (add-to-list 'god-exempt-major-modes 'org-agenda-mode))
#+end_src
** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :init
    (use-package dired-x) ; enables dired-jump, C-x C-j
    :config
    (put 'dired-find-alternate-file 'disabled nil)
    (bind-keys :map dired-mode-map
               ("<return>" . dired-find-alternate-file)
               ("^" . (lambda () (interactive) (find-alternate-file ".."))))
    (use-package dired-details
      :init
      (dired-details-install))
    (use-package dired-subtree
      :init
      (bind-keys :map dired-mode-map
                 :prefix "C-,"
                 :prefix-map dired-subtree-map
                 :prefix-docstring "Dired subtree map."
                 ("C-i" . dired-subtree-insert)
                 ("C-/" . dired-subtree-apply-filter)
                 ("C-k" . dired-subtree-remove)
                 ("C-n" . dired-subtree-next-sibling)
                 ("C-p" . dired-subtree-previous-sibling)
                 ("C-u" . dired-subtree-up)
                 ("C-d" . dired-subtree-down)
                 ("C-a" . dired-subtree-beginning)
                 ("C-e" . dired-subtree-end)
                 ("m" . dired-subtree-mark-subtree)
                 ("u" . dired-subtree-unmark-subtree)
                 ("C-o C-f" . dired-subtree-only-this-file)
                 ("C-o C-d" . dired-subtree-only-this-directory))))
#+END_SRC

Some of these suggestions are adapted from Xah Lee's [[http://ergoemacs.org/emacs/emacs_dired_tips.html][article on Dired]]. dired-find-alternate-file, which is bound to a, is disabled by default. <return> was previously dired-advertised-find-file, and ^ was previously dired-up-directory. Relatedly, I re-bind 'q' to my kill-this-buffer function below.

Dired-details lets me show or hide the details with ) and (, respectively. If, for some reason, it becomes hard to remember this, dired-details+ makes the parentheses interchangeable.
** IDO
[[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][IDO]] lets you interactively do things with files and buffers.

One key component below is ido-vertical-mode, which makes ido much
more attractive.

#+begin_src emacs-lisp
  (setq ido-enable-flex-matching t
        ido-everywhere t
        ido-use-faces nil ;; disable ido faces to see flx highlights.
        ido-create-new-buffer 'always
        ido-use-filename-at-point 'guess)
  (ido-mode 1)
  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode))
  (use-package ido-ubiquitous
    :init
    (ido-ubiquitous-mode 1))
  (use-package flx-ido
    :init
    (flx-ido-mode 1))
  (use-package idomenu
    :bind ("M-i" . idomenu))
#+end_src

Note that there are certain program specific settings for IDO, which
are not in this section:
- Smex
- Org-Mode
- ido-recentf-open function
** Smex
Smex (Smart M-X) implements IDO functionality for the M-X window.

#+begin_src emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)
           ("<menu>" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command))
    :init
    (smex-initialize))
#+end_src
** Company Mode
#+begin_src emacs-lisp
  (use-package company-mode
    :bind ("C-." . company-complete)
    :init 
    (global-company-mode 1)
    :config
    (bind-keys :map company-active-map
               ("C-n" . company-select-next)
               ("C-p" . company-select-previous)
               ("C-d" . company-show-doc-buffer)
               ("<tab>" . company-complete)))
#+end_src
** Ace Jump Mode
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind ("C-c SPC" . ace-jump-mode))
#+end_src
** Expand Region
Configured like Magnars in Emacs Rocks, [[http://emacsrocks.com/e09.html][Episode 09]].

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-@" . er/expand-region))
(pending-delete-mode t)
#+end_src
** Multiple Cursors
You've got to admit, [[http://emacsrocks.com/e13.html][Emacs Rocks]]. Thanks for the [[https://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1-3-3-1][code]], Sacha.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind 
   (("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-*" . mc/mark-all-like-this)))
#+end_src emacs-lisp
** Kill Ring
While "kill" might epitomize the idiosyncrasy of Emacs' vocabulary,
it's great that Emacs keeps track of what's been killed. Browse kill
ring is crucial to making that functionality visible and usable.

#+begin_src emacs-lisp
(use-package browse-kill-ring
  :bind ("C-x C-y" . browse-kill-ring))
#+end_src
** Recent Files
Recent files is a minor mode that keeps track of which files you're using, and provides it in some handy places.

I also rebind the find-file-read-only with ido-recent-files functionality, which I took from [[http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/][Mastering Emacs]].

#+begin_src emacs-lisp
  (use-package recentf
    :init
    (recentf-mode t)
    (setq recentf-max-saved-items 50)
    (defun ido-recentf-open ()
      "Use `ido-completing-read' to \\[find-file] a recent file"
      (interactive)
      (if (find-file (ido-completing-read "Find recent file: " recentf-list))
          (message "Opening file...")
        (message "Aborting")))
    :bind ("C-x C-r" . ido-recentf-open))
#+end_src
** Save Place
This comes from [[http://whattheemacsd.com/init.el-03.html][Magnars]].

#+begin_src emacs-lisp
  (use-package saveplace
    :init
    (setq-default save-place t)
    (setq save-place-file (expand-file-name ".places" user-emacs-directory)))
#+end_src
** Email (mu4e)
Email is pretty text-heavy... let's do that in Emacs. I am currently using mu4e, which was indeed pretty easy to set up. I use a stock Emacs package, smptmail, to send mail. It plugs into the gnutls command line utilities, which my Arch machine has installed already.

I also have queuing set up, so that I can still "send" emails without Internet access. Once this is enabled, you can see some new options in the main view, to toggle online/offline [m], and to send queued mail [f].

The folder /home/user/Maildir/queue/ needs to be created with the command "mu mkdir." After that, run "touch ~/Maildir/queue/.noindex" to make sure mu doesn't index this folder.

Messages that Emacs cannot read can be read in Chromium with the "aV" shortcut.

#+begin_src emacs-lisp
  (use-package mu4e
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :init
    (setq mu4e-maildir "~/Maildir"
          mu4e-drafts-folder "/Gmail/[Gmail].Drafts"
          mu4e-sent-folder   "/Gmail/[Gmail].Sent Mail"
          mu4e-trash-folder  "/Gmail/[Gmail].Trash"
          mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 1800
          mu4e-maildir-shortcuts
          '( ("/Gmail/INBOX"               . ?i)
             ("/Gmail/Correspondence"      . ?c)
             ("/Gmail/[Gmail].Sent Mail"   . ?s)
             ("/Gmail/[Gmail].Trash"       . ?t)
             ("/Gmail/[Gmail].All Mail"    . ?a))
          mu4e-headers-skip-duplicates t
          mu4e-view-show-images t
          mu4e-view-image-max-width 800
          message-signature "MWF"
          mu4e-sent-messages-behavior 'delete
          message-kill-buffer-on-exit t
          mu4e-headers-skip-duplicates t)
    (use-package smtpmail
      :init
      (setq message-send-mail-function 'smtpmail-send-it
            smtpmail-stream-type 'starttls
            smtpmail-default-smtp-server "smtp.gmail.com"
            smtpmail-smtp-server "smtp.gmail.com"
            smtpmail-smtp-service 587
            smtpmail-queue-mail  nil
            smtpmail-queue-dir  "/home/michael/Maildir/queue/cur"))
    :bind ("C-c m" . mu4e)
    :config
    (add-to-list 'mu4e-view-actions
                 '("ViewInBrowser" . mu4e-action-view-in-browser) t)
    (add-hook 'mu4e-compose-mode-hook 'turn-on-orgstruct))
#+end_src
** ERC
#+begin_src emacs-lisp
(use-package erc
  :config
  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#emacs"))
        erc-server "irc.freenode.net"
        erc-nick "mwfogleman"))
#+end_src
** SLIME
"Take this REPL, brother, and may it serve you well."

#+begin_src emacs-lisp
  (use-package slime-autoloads)
  (use-package slime
    :load-path "/usr/share/emacs/site-lisp/slime/"
    :init
    (slime-setup)
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq common-lisp-hyperspec-root "file:///home/michael/ebooks/docs/HyperSpec/")
    (add-to-list 'slime-contribs 'slime-fancy))
#+end_src
** Magit
This code from [[http://whattheemacsd.com/setup-magit.el-01.html][Magnars]] opens magit-status in one frame, and then
restores the old window configuration when you quit.

#+begin_src emacs-lisp
  (use-package magit
    :bind (("C-x g" . magit-status)
           ("<f7>" . magit-status)
           ("C-c g" . magit-status))
    :config
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))
  
    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen))
  
    (bind-keys :map magit-status-mode-map
               ("q" . magit-quit-session)))
#+end_src
** Org Mode
*** Quotations
#+begin_quote
Org-mode does outlining, note-taking, hyperlinks, spreadsheets, TODO
lists, project planning, GTD, HTML and LaTeX authoring, all with plain
text files in Emacs.

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote

#+begin_quote
If I hated everything about Emacs, I would still use it for org-mode.

--[[http://orgmode.org/worg/org-quotes.html][Avdi]] on Twitter
#+end_quote

#+begin_quote
...for all intents and purposes, Org-mode *is* [[http://www.taskpaper.com/][Taskpaper]]!

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote
*** Configuration
I use the stock package of org-mode as the default major mode.

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq default-major-mode 'org-mode
          org-directory "/home/michael/Dropbox/org/"
          org-log-done t
          org-startup-indented t
          org-agenda-inhibit-startup nil
          org-startup-truncated nil
          org-completion-use-ido t
          org-agenda-start-on-weekday nil
          org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9)))
          org-refile-use-outline-path t
          org-default-notes-file (concat org-directory "notes.org")
          org-goto-max-level 10
          org-imenu-depth 5
          org-goto-interface 'outline-path-completion
          org-outline-path-complete-in-steps nil
          org-use-speed-commands t
          org-src-fontify-natively t
          org-capture-templates
          '(("a" "Arch Log" plain (file+datetree "~/Dropbox/arch/log")
             "%?\n")
            ("g" "Gratitude Journal" entry (file+datetree "~/Dropbox/org/gratitude.org")
             "* I am grateful for %?\n")
            ("n" "Note" entry (file "~/Dropbox/org/notes.org")
             "* %?\n")
            ("s" "Spark" entry (file+datetree "~/Dropbox/org/spark.org")
             "* %?")
            ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
             "* %?\nEntered on %U\n  %i\n")
            ("t" "Todo" entry (file "~/Dropbox/org/todo.org")
             "* TODO %?\n"))))
#+end_src

The org-agenda-files variable is set in Customize using the C-c [ and ] commands.

My settings for capture were some of my first Elisp :) I did need, and still need, the help of the  [[http://orgmode.org/manual/Capture-templates.html#Capture-templates][Org-Mode manual]], of course.

I use org-struct in mu4e. See above.
*** Bindings
#+begin_src emacs-lisp
  (bind-key "C-c l" 'org-store-link)
  (bind-key "C-c c" 'org-capture)
  (bind-key "C-c a" 'org-agenda)
  (bind-key "C-c b" 'org-iswitchb)
  (bind-key "C-c M-k" 'org-cut-subtree)
#+end_src
** TiddlyWiki
I edit [[http://tiddlywiki.com/][TiddlyWiki]]5 .tid files in Emacs using my [[https://github.com/mwfogleman/tid-mode][tid-mode]] major mode.
*** tid-mode
#+begin_src emacs-lisp
  (use-package tid-mode
    :load-path "site-lisp/tid-mode/")
#+end_src
*** open-wiki
This function, bound to C-c w, opens my TiddlyWiki tiddlers directory in Dired.

#+BEGIN_SRC emacs-lisp
  (defun open-wiki ()
    "Opens my TiddlyWiki directory."
    (interactive)
    (dired "~/Dropbox/wiki/tiddlers/"))
  
  (bind-key "C-c w" 'open-wiki)
#+END_SRC
*** browse-wiki
I also often want to open my wiki in Chromium. I bind this to C-c W.

#+BEGIN_SRC emacs-lisp
  (defun browse-wiki ()
    "Opens my TiddlyWiki in my browser."
    (interactive)
    (browse-url "127.0.0.1:8080/"))
  
  (bind-key "C-c W" 'browse-wiki)
#+END_SRC
** smartparens
#+begin_src emacs-lisp
  (use-package smartparens
    :bind
    (("C-M-f" . sp-forward-sexp)
     ("C-M-b" . sp-backward-sexp)
     ("C-M-d" . sp-down-sexp)
     ("C-M-a" . sp-backward-down-sexp)
     ("C-S-a" . sp-beginning-of-sexp)
     ("C-S-d" . sp-end-of-sexp)
     ("C-M-e" . sp-up-sexp)
     ("C-M-u" . sp-backward-up-sexp)
     ("C-M-t" . sp-transpose-sexp)
     ("C-M-n" . sp-next-sexp)
     ("C-M-p" . sp-previous-sexp)
     ("C-M-k" . sp-kill-sexp)
     ("C-M-w" . sp-copy-sexp)
     ("M-<delete>" . sp-unwrap-sexp)
     ("M-S-<backspace>" . sp-backward-unwrap-sexp)
     ("C-<right>" . sp-forward-slurp-sexp)
     ("C-<left>" . sp-forward-barf-sexp)
     ("C-M-<left>" . sp-backward-slurp-sexp)
     ("C-M-<right>" . sp-backward-barf-sexp)
     ("C-M-<delete>" . sp-splice-sexp-killing-forward)
     ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
     ("C-]" . sp-select-next-thing-exchange)
     ("C-<left_bracket>" . sp-select-previous-thing)
     ("C-M-]" . sp-select-next-thing)
     ("M-F" . sp-forward-symbol)
     ("M-B" . sp-backward-symbol)
     ("H-t" . sp-prefix-tag-object)
     ("H-p" . sp-prefix-pair-object)
     ("H-s c" . sp-convolute-sexp)
     ("H-s a" . sp-absorb-sexp)
     ("H-s e" . sp-emit-sexp)
     ("H-s p" . sp-add-to-previous-sexp)
     ("H-s n" . sp-add-to-next-sexp)
     ("H-s j" . sp-join-sexp)
     ("H-s s" . sp-split-sexp))
    :init
    (smartparens-global-mode t)
    (show-smartparens-global-mode t)
    (use-package smartparens-config))
#+end_src
** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :init
  (diminish 'smartparens-mode)
  (diminish 'company-mode))
#+end_src
** Key Chord mode
#+begin_src emacs-lisp
(use-package key-chord
  :init
  (progn 
    (setq key-chord-two-keys-delay .015
          key-chord-one-key-delay .020)
    (key-chord-mode 1)
    (key-chord-define-global "cg" 'undo)
    (key-chord-define-global "yp" 'other-window)
    (key-chord-define-global ";0" 'delete-window)
    (key-chord-define-global ";1" 'delete-other-windows)
    (key-chord-define-global ";2" 'split-window-below)
    (key-chord-define-global ";3"  'split-window-right)
    (key-chord-define-global ",." 'beginning-of-buffer)
    (key-chord-define-global ".p" 'end-of-buffer)
    (key-chord-define-global "jw" 'ace-jump-word-mode)
    (key-chord-define-global "jc" 'ace-jump-char-mode)
    (key-chord-define-global "jl" 'ace-jump-line-mode)
    (key-chord-define-global "'l" 'ido-switch-buffer)
    (key-chord-define-global "'-" 'smex)
    (key-chord-define-global ",r" 'find-file)
    (key-chord-define-global ".c" 'ido-dired)))
#+end_src
* Functions
** Emacs Configuration File
This function and the corresponding keybinding allows me to rapidly
access my configuration. They are adapted from Bozhidar Batsov's [[http://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/][post
on Emacs Redux]].

I use mwf-init-file rather than user-init-file, because I edit the
config file in a Git repo.

#+begin_src emacs-lisp
  (defun find-init-file ()
    "Edit my init file in another window."
    (interactive)
    (let ((mwf-init-file "~/src/config/home/.emacs.d/michael.org"))
      (find-file mwf-init-file)))
  
  (bind-key "C-c I" 'find-init-file)
#+end_src

Relatedly, I often want to reload my init-file. This will actually use
the system-wide user-init-file variable.

#+begin_src emacs-lisp
  (defun reload-init-file ()
    "Reload my init file."
    (interactive)
    (load-file user-init-file))
  
  (bind-key "C-c M-l" 'reload-init-file)
#+end_src
** Keep In Touch
I use mi amigo [[https://github.com/benpence/][Ben]]'s [[https://github.com/benpence/keepintouch][Keep In Touch]] program. This re-implements some of
the command line utility's functionality in Elisp.

#+begin_src emacs-lisp
  (defun keptintouch (arg)
    "Request a contact in a keepintouch.data file, and update their last
    contacted date (either today, or, if a prefix is supplied, a user-supplied date.)"
    (interactive "P")
    (let ((contact (read-string "Who did you contact? "))
          (datafile "/home/michael/Dropbox/keepintouch.data")
          (date (if (equal arg nil)
                    (format-time-string "%Y/%m/%d")
                  (read-string "When did you contact them? (year/month/date): "))))
      (keptintouch-contact date)))
  
  (defun keptintouch-contact (date)
    "Navigates the keepintouch.data file."
    (save-excursion
      (find-file datafile)
      (goto-char (point-min))
      (search-forward contact)
      (forward-line -1)
      (beginning-of-line)
      (kill-line)
      (insert date)
      (save-buffer)
      (switch-to-buffer (other-buffer))
      (kill-buffer (other-buffer)))
    (message "%s was contacted." contact))
#+end_src

Sacha informs us that "shortcuts like C-c followed by a lowercase letter (a to z) are reserved for your use." Let's bind "C-c k" to keptintouch.

#+BEGIN_SRC emacs-lisp
  (bind-key "C-c k" 'keptintouch)
#+END_SRC
** Buffer Management
*** Open Org Agenda
This function opens the agenda in full screen.

#+begin_src emacs-lisp
  (defun open-agenda ()
    "Opens the org-agenda."
    (interactive)
    (let ((agenda "*Org Agenda*"))
      (if (equal (get-buffer agenda) nil)
          (org-agenda-list)
        (if (equal (buffer-name (current-buffer)) agenda)
            (org-agenda-redo t)
          (switch-to-buffer agenda))))
    (delete-other-windows))
#+end_src

Let's bind this to a key-chord and a function key.

#+begin_src emacs-lisp
  (key-chord-define-global "`a" 'open-agenda)
  (bind-key "<f5>" 'open-agenda)
#+end_src
*** Kill This Buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-this-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  
  (bind-key "C-x C-k" 'kill-this-buffer)
#+END_SRC

By default, pressing 'q' in Dired runs quit-window, which quits the Dired window and buries its buffer. I'd prefer the buffer to close.

#+BEGIN_SRC emacs-lisp
  (bind-keys :map dired-mode-map
             ("q" . kill-this-buffer))
#+END_SRC
*** Kill All Other Buffers
#+begin_src emacs-lisp
(defun kill-other-buffers ()
   "Kill all other buffers."
   (interactive)
   (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
*** Kill All Dired Buffers
#+begin_src emacs-lisp
(defun kill-all-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let ((count 0))
      (dolist (buffer (buffer-list))
	(set-buffer buffer)
        (when (equal major-mode 'dired-mode)
	  (setq count (1+ count))
	  (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count))))
#+end_src

Note that this function is largely obsoleted by the in-Dired re-mappings of <return>, ^, and q, located elsewhere in this config.
** Edit as Root
This tip comes from an [[http://emacs-fu.blogspot.kr/2013/03/editing-with-root-privileges-once-more.html][emacs-fu blog post]].

#+BEGIN_SRC emacs-lisp
  (defun find-file-as-root ()
    "Like `ido-find-file, but automatically edit the file with
  root-privileges (using tramp/sudo), if the file is not writable by
  user."
    (interactive)
    (let ((file (ido-read-file-name "Edit as root: ")))
      (unless (file-writable-p file)
        (setq file (concat "/sudo:root@localhost:" file)))
      (find-file file)))
  
  (bind-key "C-x F" 'find-file-as-root)
#+END_SRC
** Unfill Paragraph
This function greedily borrowed from Sacha.

#+BEGIN_SRC emacs-lisp
  (defun unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn
                   (barf-if-buffer-read-only)
                   (list t)))
    (let ((fill-column (point-max)))
      (fill-paragraph nil region)))
  
  (bind-key "M-Q" 'unfill-paragraph)
#+END_SRC
