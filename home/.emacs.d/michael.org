#+TITLE: Michael Fogleman's Emacs configuration
#+OPTIONS: toc:4 h:4
* Introduction
** Quotations
*** On Emacs
#+begin_quote 
Emacs outshines all other editing software in approximately the same
way that the noonday sun does the stars. It is not just bigger and
brighter; it simply makes everything else vanish.

-- Neal Stephenson, "[[http://www.cryptonomicon.com/beginning.html][In the Beginning was the Command Line]]"
#+end_quote

#+begin_quote
On 2 Apr 1992 in the journal Nature the discovery was reported that a
giant ancient fungus had been living under the forests of Michigan for
at least 1,500 years, the oldest and largest living thing on
Earth. Software could get to be like that, I suppose, and Emacs,
incorporating, like the fungal thallus, all the the filamentous
strands of Emacs Lisp that now already thinly web the Earth, is surely
a front runner. But do not be distracted by such lives.  Even the life
of Emacs, like the life of that fungus, is an ephemerality; to grok
life one must transcend not only thermospace but cyberspace.

-- [[http://www.eskimo.com/~seldon/dotemacs.el][Will Mengarini]]
#+end_quote

*** On Literate Programming

#+begin_quote 
Let us change our traditional attitude to the construction of
programs: Instead of imagining that our main task is to instruct a
computer what to do, let us concentrate rather on explaining to human
beings what we want a computer to do.

The practitioner of literate programming can be regarded as an
essayist, whose main concern is with exposition and excellence of
style. Such an author, with thesaurus in hand, chooses the names of
variables carefully and explains what each variable means. He or she
strives for a program that is comprehensible because its concepts have
been introduced in an order that is best for human understanding,
using a mixture of formal and informal methods that reinforce each
other.

-- Donald Knuth
#+end_quote

#+begin_quote 
In my experience, software created with literate programming has
turned out to be significantly better than software developed in more
traditional ways...

Jon Bentley probably hit the nail on the head when he once was asked
why literate programming hasn’t taken the whole world by storm. He
observed that a small percentage of the world’s population is good at
programming, and a small percentage is good at writing; apparently I
am asking everybody to be in both subsets.

Yet to me, literate programming is certainly the most important thing
that came out of the TeX project. Not only has it enabled me to write
and maintain programs faster and more reliably than ever before, and
been one of my greatest sources of joy since the 1980s—it has actually
been indispensable at times.

-- [[http://www.informit.com/articles/article.aspx?p=1193856][Donald Knuth]]
#+end_quote
* Settings
** Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Michael Fogleman"
      user-mail-address "michaelwfogleman@gmail.com")
#+end_src
** Graphical Features
*** Unnecessary graphical features
#+begin_src emacs-lisp
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(setq inhibit-startup-message t
      initial-scratch-message ""
      inhibit-startup-echo-area-message t)
#+end_src
*** Windows
Additionally, I'd like to handle windows intelligently. I'll use the
windmove functionality, along with some special functionality for Org
where windmove is active in locations where Org Mode does not have
special functions.

#+begin_src emacs-lisp
(windmove-default-keybindings)
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
#+end_src
** Backups
#+begin_src emacs-lisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name
                 (concat user-emacs-directory "backups")))))
#+end_src
** Lines
Enable line indenting automatically. If needed, you can disable on a mode-by-mode basis.

#+begin_src emacs-lisp
(define-key global-map (kbd "RET") 'newline-and-indent)
#+end_src

Make C-n insert new lines if the point is at the end of the buffer.

#+begin_src emacs-lisp
(setq next-line-add-newlines t)
#+end_src
** Change prompts
Make yes or no prompts be y or n prompts.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Computer
This displays the time and the status of my laptop battery.

#+begin_src emacs-lisp
(setq display-time-day-and-date 1)
(display-time-mode 1)
(display-battery-mode 1)
#+end_src
** Internet
It'd be great to get an Emacs browser going, but in the meantime:

#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "chromium")
#+end_src
** Keyboard Shortcuts
*** From Better Defaults
These bindings (from "[[https://github.com/technomancy/better-defaults][Better Defaults]]")rebind the default commands to
use hippie-expand, ibuffer, and the regex-aware versions of isearch.

#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src
*** Movement
These keybindings for movement come from [[http://whattheemacsd.com/key-bindings.el-02.html][What the .emacs.d?]].

#+begin_src emacs-lisp
(global-set-key (kbd "C-S-n")
                (lambda ()
                  (interactive)
                  (ignore-errors (next-line 5))))

(global-set-key (kbd "C-S-p")
                (lambda ()
                  (interactive)
                  (ignore-errors (previous-line 5))))

(global-set-key (kbd "C-S-f")
                (lambda ()
                  (interactive)
                  (ignore-errors (forward-char 5))))

(global-set-key (kbd "C-S-b")
                (lambda ()
                  (interactive)
                  (ignore-errors (backward-char 5))))
#+end_src
** Other
*** Apropos
Let apropos commands perform more extensive searches than
default. This also comes from Better Defaults.

#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src
*** Buffer / File Warnings
Remove the warning if a buffer or file does not exist, so you can
create them.

#+begin_src emacs-lisp
(setq confirm-nonexistent-file-or-buffer nil)
#+end_src
*** Narrow to Region
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src
* Packages
** Enable Package Support
This allows me to browse and install packages from Melpa.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)
(require 'use-package)
#+end_src

It'd be handy to have a list of the packages that I have installed, so
that I could use one of the fancy "install-if-not-installed" functions
that the Elisp Gods have created.
** Specific Packages
*** God Mode
[[https://github.com/chrisdone/god-mode][God Mode]] makes Emacs key-combinations a lot shorter! I've set ESC to
toggle between God mode and non-God mode.

#+begin_src emacs-lisp
(defun my-update-cursor ()
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'bar
                      'box)))

(use-package god-mode
  :bind (("<escape>" . god-local-mode)
        ("C-x C-1" . delete-other-windows)
        ("C-x C-2" . split-window-below)
        ("C-x C-3" . split-window-right)
        ("C-x C-0" . delete-window))
  :init
  (add-hook 'god-mode-enabled-hook 'my-update-cursor)
  (add-hook 'god-mode-disabled-hook 'my-update-cursor)
  :config
  (define-key god-local-mode-map (kbd "z") 'repeat)
  (define-key god-local-mode-map (kbd ".") 'repeat)
  (define-key god-local-mode-map (kbd "i") 'god-local-mode)
  (add-to-list 'god-exempt-major-modes 'mu4e-compose-mode)
  (add-to-list 'god-exempt-major-modes 'org-agenda-mode))
#+end_src
*** Dired
**** Dired-X
#+begin_src emacs-lisp
(use-package dired-x)
#+end_src
**** Dired Details
I like using Dired; dired-details makes it less loud.

Note that you can show or hide the details with ) and (,
respectively. If, for some reason, it becomes hard to remember this,
you can install dired-details+.

#+begin_src emacs-lisp
(use-package dired-details
  :init
  (dired-details-install))
#+end_src
*** IDO
[[http://www.masteringemacs.org/articles/2010/10/10/introduction-to-ido-mode/][IDO]] lets you interactively do things with files and buffers.
**** Set Up
One key component below is ido-vertical-mode, which makes ido much
more attractive.

#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(require 'ido-vertical-mode)
(require 'ido-ubiquitous)
(require 'flx-ido)
(ido-mode 1)
(ido-vertical-mode)
(ido-ubiquitous-mode 1)
(flx-ido-mode 1)
(setq ido-use-faces nil) ;; disable ido faces to see flx highlights.
(setq ido-create-new-buffer 'always) ;; Remove warning if buffer does not exist
#+end_src
**** Ido Menu
#+begin_src emacs-lisp
(use-package idomenu
  :bind ("M-i" . idomenu))
#+end_src
**** Other
Note that there are certain program specific settings for IDO, which
are not in this section:
- Org-Mode
- ido-recentf-open function
*** Smex
Smex (Smart M-X) implements IDO functionality for the M-X window.

#+begin_src emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)
           ("<menu>" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command))
    :init
    (smex-initialize))
#+end_src
*** Company Mode
#+begin_src emacs-lisp
(use-package company-mode
  :bind ("C-." . company-complete)
  :init 
  (global-company-mode 1)
  (define-key company-active-map (kbd "\C-n") 'company-select-next)
  (define-key company-active-map (kbd "\C-p") 'company-select-previous)
  (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
  (define-key company-active-map (kbd "<tab>") 'company-complete))
#+end_src
*** Ace Jump Mode
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :bind ("C-c SPC" . ace-jump-mode))
#+end_src
*** Expand Region
Configured like Magnars in Emacs Rocks, [[http://emacsrocks.com/e09.html][Episode 09]].

#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-@" . er/expand-region))
(pending-delete-mode t)
#+end_src
*** Multiple Cursors
You've got to admit, [[http://emacsrocks.com/e13.html][Emacs Rocks]]. Thanks for the [[https://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html#sec-1-3-3-1][code]], Sacha.

#+begin_src emacs-lisp
(use-package multiple-cursors
  :bind 
   (("C->" . mc/mark-next-like-this)
    ("C-<" . mc/mark-previous-like-this)
    ("C-*" . mc/mark-all-like-this)))
#+end_src emacs-lisp
*** Kill Ring
While "kill" might epitomize the idiosyncrasy of Emacs' vocabulary,
it's great that Emacs keeps track of what's been killed. Browse kill
ring is crucial to making that functionality visible and usable.

#+begin_src emacs-lisp
(use-package browse-kill-ring
  :bind ("C-x C-y" . browse-kill-ring))
#+end_src
*** Recent Files
Recent files is a minor mode that keeps track of which files you're
using, and provides it in some handy places.

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode t)
(setq recentf-max-saved-items 50)
#+end_src

Let's rebind find-file-read-only with ido-recent-files
functionality. The ido-recentf-open function was taken from [[http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/][Mastering
Emacs]].

#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-r") 'ido-recentf-open)
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))
#+end_src
*** Save Place
This comes from [[http://whattheemacsd.com/init.el-03.html][Magnars]].

#+begin_src emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
#+end_src
*** Email (mu4e)
Email is pretty text-heavy... let's do that in Emacs.

I am currently using mu4e, which was indeed pretty easy to set up.
**** mu
mu4e is mu for Emacs... so we have to tell Emacs where mu is before
activating mu4e.

#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)
#+end_src
**** Directories
#+begin_src emacs-lisp
(setq mu4e-maildir "~/Maildir")
(setq mu4e-drafts-folder "/Gmail/[Gmail].Drafts")
(setq mu4e-sent-folder   "/Gmail/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/Gmail/[Gmail].Trash")
#+end_src
**** Receiving
Here we enable updating ('U'), and tell mu4e to update every
half-hour.

#+begin_src emacs-lisp
(setq mu4e-get-mail-command "offlineimap")
(setq mu4e-update-interval 1800)
#+end_src

**** Browsing
***** Shortcuts

You can jump to a shortcut by prefixing 'j' to the corresponding
letter, or move an email to a folder (including 'All Mail,' bound to
'a') by prefixing 'm.'

#+begin_src emacs-lisp
(setq mu4e-maildir-shortcuts
    '( ("/Gmail/INBOX"               . ?i)
       ("/Gmail/Correspondence"      . ?c)
       ("/Gmail/[Gmail].Sent Mail"   . ?s)
       ("/Gmail/[Gmail].Trash"       . ?t)
       ("/Gmail/[Gmail].All Mail"    . ?a)))
#+end_src
***** Skip Duplicates
This is useful for Gmail.

#+begin_src emacs-lisp
(setq mu4e-headers-skip-duplicates t)
#+end_src
**** Viewing
***** Inline Images
This tells mu4e to attempt to show images when viewing messages.

#+begin_src emacs-lisp
(setq mu4e-view-show-images t
      mu4e-view-image-max-width 800)
#+end_src
**** Composing
***** Signature
I already set the user name and mail address above. Here I set my
message signature.

#+begin_src emacs-lisp
(setq message-signature "MWF")
#+end_src
**** Sending
***** smtpmail

We use a stock Emacs package to send mail. It plugs into the gnutls
command line utilities, which my Arch machine has installed already.

#+begin_src emacs-lisp
(require 'smtpmail)
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-stream-type 'starttls
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587)
#+end_src
***** Offline Support
This creates a queue of emails to be sent with Internet access. Once
this is enabled, you can see some new options in the main view, to
toggle online/offline [m], and to send queued mail [f].

The folder /home/user/Maildir/queue/ needs to be created with the
command "mu mkdir." After that, run "touch ~/Maildir/queue/.noindex"
to make sure mu doesn't index this folder.

#+begin_src emacs-lisp
(setq smtpmail-queue-mail  nil
      smtpmail-queue-dir  "/home/michael/Maildir/queue/cur")
#+end_src
**** Other Set Up
Don't save message to Sent Messages, Gmail/IMAP takes care of this.

#+begin_src emacs-lisp
(setq mu4e-sent-messages-behavior 'delete)
#+end_src

To avoid keeping message buffers around, this command kills the buffer
when you press "q."

#+begin_src emacs-lisp
(setq message-kill-buffer-on-exit t)
(setq mu4e-headers-skip-duplicates t)
#+end_src
*** ERC
#+begin_src emacs-lisp
(use-package erc
  :config
  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#emacs"))
        erc-server "irc.freenode.net"
        erc-nick "mwfogleman"))
#+end_src
*** SLIME
"Take this REPL, brother, and may it serve you well."

#+begin_src emacs-lisp
(setq inferior-lisp-program "/usr/bin/sbcl")
(setq common-lisp-hyperspec-root "file:///home/michael/ebooks/docs/HyperSpec/")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/slime/")
(add-to-list 'slime-contribs 'slime-fancy)
(require 'slime-autoloads)
(require 'slime)
(slime-setup)
#+end_src
*** Magit
This code from [[http://whattheemacsd.com/setup-magit.el-01.html][Magnars]] opens magit-status in one frame, and then
restores the old window configuration when you quit.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         ("<f7>" . magit-status))
  :config
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+end_src
***** View in Browser
"Some messages are unreadable in Emacs." 

#+BEGIN_SRC emacs-lisp
  (add-to-list 'mu4e-view-actions
               '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

"Now, when viewing such a difficult message, type `aV', and the message opens inside a webbrowser."
*** Org Mode
**** Quotations
#+begin_quote
Org-mode does outlining, note-taking, hyperlinks, spreadsheets, TODO
lists, project planning, GTD, HTML and LaTeX authoring, all with plain
text files in Emacs.

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote

#+begin_quote
If I hated everything about Emacs, I would still use it for org-mode.

--[[http://orgmode.org/worg/org-quotes.html][Avdi]] on Twitter
#+end_quote

#+begin_quote
...for all intents and purposes, Org-mode *is* [[http://www.taskpaper.com/][Taskpaper]]!

-- [[http://article.gmane.org/gmane.emacs.orgmode/6224][Carsten Dominik]]
#+end_quote
**** Enable
I use the stock package of org-mode as the default major mode.

#+begin_src emacs-lisp
(require 'org)
(setq default-major-mode 'org-mode)
#+end_src

I also want org-mode to be used elsewhere.

#+begin_src emacs-lisp
(add-hook 'mu4e-compose-mode-hook 'turn-on-orgstruct)
; (add-hook 'text-mode-hook 'turn-on-orgstruct)
#+end_src
**** Org Variables
Here are some critical variables for Org Mode. The org-agenda-files
variable is set in Customize using the C-c [ and ] commands.

#+begin_src emacs-lisp
  (setq org-directory "/home/michael/Dropbox/org/"
        org-log-done t
        org-startup-indented t
        org-agenda-inhibit-startup nil
        org-startup-truncated nil
        org-completion-use-ido t
        org-agenda-start-on-weekday nil
        org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9)))
        org-default-notes-file (concat org-directory "notes.org")
        org-goto-max-level 10
        org-imenu-depth 5
        org-goto-interface 'outline-path-completion
        org-outline-path-complete-in-steps nil
        org-use-speed-commands t
        org-src-fontify-natively t)
#+end_src
**** Org Capture
Here are some settings for capture. This was some of my first ELisp!
(With the help of the [[http://orgmode.org/manual/Capture-templates.html#Capture-templates][Org-Mode manual]], of course.)

Some special capture items: I keep a log of everything that happens on
my computer, a gratitude journal, and a [[https://medium.com/p/8d6e7df7ae58][Spark]] file (which I review
periodically, scheduled with Org).

#+begin_src emacs-lisp
(setq org-capture-templates
      '(("a" "Arch Log" plain (file+datetree "~/Dropbox/arch/log")
	     "%?\n")
	("g" "Gratitude Journal" entry (file+datetree "~/Dropbox/org/gratitude.org")
	     "* I am grateful for %?\n")
	("n" "Note" entry (file+headline "~/Dropbox/org/notes.org" "Notes")
	     "* %?\n")
	("s" "Spark" entry (file+datetree "~/Dropbox/org/spark.org" "Sparks")
             "* %?\n  %u")
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
             "* %?\nEntered on %U\n  %i\n")
	("t" "Todo" entry (file "~/Dropbox/org/todo.org")
	     "* TODO %?\n")))
#+end_src

**** Org Keyboard Shortcuts
#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src
**** Start Org mode on init
This opens the agenda on initiation.

#+begin_src emacs-lisp
(add-hook 'after-init-hook 'org-agenda-list)
#+end_src
*** TiddlyWiki Mode
I edit [[http://tiddlywiki.com/][TiddlyWiki]]5 .tid files in Emacs using my [[https://github.com/mwfogleman/tid-mode][tid-mode]] major mode.

#+begin_src emacs-lisp
(load (expand-file-name
       (concat user-emacs-directory "site-lisp/tid-mode/tid-mode.el")))
(require 'tid-mode)
#+end_src
*** smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :bind
  (("C-M-f" . sp-forward-sexp)
   ("C-M-b" . sp-backward-sexp)
   ("C-M-d" . sp-down-sexp)
   ("C-M-a" . sp-backward-down-sexp)
   ("C-S-a" . sp-beginning-of-sexp)
   ("C-S-d" . sp-end-of-sexp)
   ("C-M-e" . sp-up-sexp)
   ("C-M-u" . sp-backward-up-sexp)
   ("C-M-t" . sp-transpose-sexp)
   ("C-M-n" . sp-next-sexp)
   ("C-M-p" . sp-previous-sexp)
   ("C-M-k" . sp-kill-sexp)
   ("C-M-w" . sp-copy-sexp)
   ("M-<delete>" . sp-unwrap-sexp)
   ("M-S-<backspace>" . sp-backward-unwrap-sexp)
   ("C-<right>" . sp-forward-slurp-sexp)
   ("C-<left>" . sp-forward-barf-sexp)
   ("C-M-<left>" . sp-backward-slurp-sexp)
   ("C-M-<right>" . sp-backward-barf-sexp)
   ("C-M-<delete>" . sp-splice-sexp-killing-forward)
   ("C-M-<backspace>" . sp-splice-sexp-killing-backward)
   ("C-]" . sp-select-next-thing-exchange)
   ("C-<left_bracket>" . sp-select-previous-thing)
   ("C-M-]" . sp-select-next-thing)
   ("M-F" . sp-forward-symbol)
   ("M-B" . sp-backward-symbol)
   ("H-t" . sp-prefix-tag-object)
   ("H-p" . sp-prefix-pair-object)
   ("H-s c" . sp-convolute-sexp)
   ("H-s a" . sp-absorb-sexp)
   ("H-s e" . sp-emit-sexp)
   ("H-s p" . sp-add-to-previous-sexp)
   ("H-s n" . sp-add-to-next-sexp)
   ("H-s j" . sp-join-sexp)
   ("H-s s" . sp-split-sexp))
  :init
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (require 'smartparens-config))
#+end_src
*** Diminish
#+begin_src emacs-lisp
(use-package diminish
  :init
  (diminish 'smartparens-mode)
  (diminish 'company-mode))
#+end_src
*** Key Chord mode
#+begin_src emacs-lisp
(use-package key-chord
  :init
  (progn 
    (setq key-chord-two-keys-delay .015
          key-chord-one-key-delay .020)
    (key-chord-mode 1)
    (key-chord-define-global "cg" 'undo)
    (key-chord-define-global "yp" 'other-window)
    (key-chord-define-global ";0" 'delete-window)
    (key-chord-define-global ";1" 'delete-other-windows)
    (key-chord-define-global ";2" 'split-window-below)
    (key-chord-define-global ";3"  'split-window-right)
    (key-chord-define-global ",." 'beginning-of-buffer)
    (key-chord-define-global ".p" 'end-of-buffer)
    (key-chord-define-global "jw" 'ace-jump-word-mode)
    (key-chord-define-global "jc" 'ace-jump-char-mode)
    (key-chord-define-global "jl" 'ace-jump-line-mode)
    (key-chord-define-global "'l" 'ido-switch-buffer)
    (key-chord-define-global "'-" 'smex)
    (key-chord-define-global ",r" 'find-file)
    (key-chord-define-global ".c" 'ido-dired)))
#+end_src
* Functions and Macros
** Functions
*** Emacs Configuration File
This function and the corresponding keybinding allows me to rapidly
access my configuration. They are adapted from Bozhidar Batsov's [[http://emacsredux.com/blog/2013/05/18/instant-access-to-init-dot-el/][post
on Emacs Redux]].

I use mwf-init-file rather than user-init-file, because I edit the
config file in a Git repo.

#+begin_src emacs-lisp
  (defun find-init-file ()
    "Edit my init file in another window."
    (interactive)
    (let ((mwf-init-file "~/src/config/home/.emacs.d/michael.org"))
      (find-file mwf-init-file)))
  
  (global-set-key (kbd "C-c I") 'find-init-file)
#+end_src

Relatedly, I often want to reload my init-file. This will actually use
the system-wide user-init-file variable.

#+begin_src emacs-lisp
(defun reload-init-file ()
  "Reload my init file."
  (interactive)
  (load-file user-init-file))

(global-set-key (kbd "C-c M-l") 'reload-init-file)
#+end_src
*** Keep In Touch
I use mi amigo [[https://github.com/benpence/][Ben]]'s [[https://github.com/benpence/keepintouch][Keep In Touch]] program. This re-implements some of
the command line utility's functionality in Elisp.

#+begin_src emacs-lisp
  (defun keptintouch (arg)
    "Request a contact in a keepintouch.data file, and update their last
    contacted date (either today, or, if a prefix is supplied, a user-supplied date.)"
    (interactive "P")
    (let ((contact (read-string "Who did you contact? "))
          (datafile "/home/michael/Dropbox/keepintouch.data")
          (date (if (equal arg nil)
                    (format-time-string "%Y/%m/%d")
                  (read-string "When did you contact them? (year/month/date): "))))
      (keptintouch-contact date)))
  
  (defun keptintouch-contact (date)
    "Navigates the keepintouch.data file."
    (save-excursion
      (find-file datafile)
      (goto-char (point-min))
      (search-forward contact)
      (forward-line -1)
      (beginning-of-line)
      (kill-line)
      (insert date)
      (save-buffer)
      (switch-to-buffer (other-buffer))
      (kill-buffer (other-buffer)))
    (message "%s was contacted." contact))
#+end_src
*** Buffer Management
**** Open Org Agenda
This function opens the agenda in full screen.

#+begin_src emacs-lisp
  (defun open-agenda ()
    "Opens the org-agenda."
    (interactive)
    (if (equal (get-buffer "*Org Agenda*") nil)
        (org-agenda-list)
      (switch-to-buffer "*Org Agenda*"))
    (delete-other-windows))
#+end_src

Let's bind this to a key-chord.

#+begin_src emacs-lisp
(key-chord-define-global "`a" 'open-agenda)
#+end_src
**** Reopen Buffer
#+begin_src emacs-lisp
(defun reopen-buffer ()
  "Saves, kills, and re-opens the current buffer."
  (interactive)
  (let* ((buffer (current-buffer))
	 (file (buffer-file-name buffer)))
    (save-buffer buffer)
    (kill-buffer buffer)
    (find-file file)))
#+end_src
**** Kill All Other Buffers
#+begin_src emacs-lisp
(defun kill-other-buffers ()
   "Kill all other buffers."
   (interactive)
   (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src
**** Kill All Dired Buffers
#+begin_src emacs-lisp
(defun kill-all-dired-buffers ()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let ((count 0))
      (dolist (buffer (buffer-list))
	(set-buffer buffer)
        (when (equal major-mode 'dired-mode)
	  (setq count (1+ count))
	  (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count))))
#+end_src
** Macros
